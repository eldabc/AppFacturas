<?php

namespace Siwapp\ProductBundle\Repository;

use Knp\Component\Pager\PaginatorInterface;
use Siwapp\ProviderBundle\Entity\InvoiceProvider;
use Siwapp\InvoiceBundle\Entity\Invoice;
use Siwapp\CategoryBundle\Entity\Category;
use Siwapp\ProductBundle\Entity\Product;
use Siwapp\CoreBundle\Entity\Item;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function findLikeReferenceSale(string $product)
    {    $date = date("Y-m-d", strtotime(date("Y-m-d")."+ 7 days") );
        // $qb =
        return
          $this->getEntityManager()
            ->createQueryBuilder()
            ->select('i')
            ->from(Item::class, 'i')
            ->leftJoin('i.product', 'p')
            ->where('p.reference = :product')
            ->setParameter('product', $product)
            ->innerJoin('p.category_id', 'c')
            ->leftJoin('i.invoiceProvider', 'ii', 'WITH', 'ii.status <> ?1')
            ->setParameter(1, InvoiceProvider::DRAFT)
            ->andWhere('i.stock IS NOT NULL')
            ->andWhere('i.expirationDate > '. "'$date'") 
            ->orderBy('i.expirationDate', 'ASC')
            ->getQuery()
            ->getResult()
            ;
         $query = $qb->getQuery();
        die(' '. $query->getSQL());
    }
    
    public function validateStock(string $product): array
    {
        return $this->getEntityManager()
        ->createQueryBuilder()
        ->select('p')
        ->from(Product::class, 'p')
        ->where('p.reference = :product')
        ->setParameter('product', $product)
        ->leftJoin('p.items', 'i')
        ->innerJoin('p.category_id', 'c')
        ->andWhere('i.stock > 0')
        ->leftJoin('i.invoiceProvider', 'ii', 'WITH', 'ii.status <> ?1')
        ->setParameter(1, InvoiceProvider::DRAFT)
        ->addSelect('SUM(CASE WHEN i.id IS NULL OR ii.id IS NULL THEN 0 ELSE i.stock END) AS stock_item') 
        ->addSelect('i.id as id_item')
        ->getQuery()
        ->getResult();

        //  $query = $qb->getQuery();
        // die('DQL ' . $query->getSQL());
    }
    
    public function findLikeReference(string $term): array
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p')
            ->from(Product::class, 'p')
            ->where('p.reference LIKE :term')
            ->setParameter('term', '%'. $term .'%')
            ->leftJoin('p.items', 'i')
            ->addSelect('i.nLote')
            ->groupBy('p.id')
            ->getQuery()
            ->getResult();

    }

    public function paginatedSearch(array $params, $limit = 50, $page = 1)
    {
        if (!$this->paginator) {
            throw new \RuntimeException('You have to set a paginator first using setPaginator() method');
        } 

        $date = date("Y-m-d", strtotime(date("Y-m-d")."+ 7 days") );
        
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p')
            ->from(Product::class, 'p');
            foreach ($params as $field => $value) {
                if ($value === null) {
                    continue;
                }
                if ($field == 'terms') {
                    $terms = $qb->expr()->literal("%$value%");
                    $qb->andWhere($qb->expr()->orX(
                        $qb->expr()->like('p.reference', $terms),
                        $qb->expr()->like('p.description', $terms)
                    ));
                }
            }

                $qb->leftJoin('p.items', 'i');
                $qb->innerJoin('p.category_id', 'c');
                $qb->leftJoin('i.invoiceProvider', 'ii', 'WITH', 'ii.status <> ?1')
                    ->setParameter(1, InvoiceProvider::DRAFT);
                $qb->addSelect('SUM(CASE WHEN (i.unitary_cost IS NOT NULL OR ii.id IS NOT NULL) AND i.item_id_provider IS NOT NULL THEN i.unitary_cost ELSE 0 END * CASE WHEN i.quantity IS NOT NULL THEN i.quantity ELSE 0 END) AS revenue');
                $qb->addSelect('c.categoryName');
                $qb->addSelect('SUM(CASE WHEN (i.quantity IS NOT NULL OR ii.id IS NOT NULL) AND i.item_id_provider IS NOT NULL THEN i.quantity ELSE 0
                 END) AS num_sold');
                $qb->addSelect('SUM(CASE WHEN (i.id IS NOT NULL OR ii.id IS NOT NULL) AND i.expirationDate > ?2 THEN i.stock ELSE 0 END) AS stock_item')
                ->setParameter(2, $date);
                // $qb->andWhere('i.expirationDate > '. date("Y-m-d", strtotime(date("Y-m-d")."+ 7 days"))) ;
                $qb->groupBy('p.category_id, p.id');
                // $query = $qb->getQuery();
                // die('DQL ' . $query->getSQL());
        return $this->paginator->paginate($qb->getQuery(), $page, $limit);

    }

    /**
     * There is no easy way to inject things into repositories yet.
     */
    public function setPaginator(PaginatorInterface $paginator)
    {
        $this->paginator = $paginator;
    }
}

